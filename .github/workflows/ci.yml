name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint with pylint (if available)
      run: |
        pip install pylint || echo "pylint not available, skipping"
        python -m pylint mcp_server.py version.py || echo "Linting completed with warnings"
      continue-on-error: true
      
    - name: Type check with mypy (if available)
      run: |
        pip install mypy || echo "mypy not available, skipping"
        python -m mypy mcp_server.py version.py || echo "Type checking completed with warnings"
      continue-on-error: true
      
    - name: Test imports
      run: |
        python -c "import version; print(f'Version module: {version.__version__}')"
        python -c "import mcp_server; print('MCP server module imported successfully')"
        
    - name: Test version consistency
      run: |
        python -c "
        from version import __version__, get_version, get_version_info
        print(f'Version: {__version__}')
        print(f'get_version(): {get_version()}')
        print(f'get_version_info(): {get_version_info()}')
        assert __version__ == get_version()
        assert get_version_info()['major'] >= 1
        print('‚úÖ Version functions working correctly')
        "
        
    - name: Test MCP server startup
      run: |
        timeout 15s python mcp_server.py || echo "Server startup test completed"
        
    - name: Run simple tests
      run: |
        if [ -f "simple_test.py" ]; then
          python simple_test.py
        else
          echo "simple_test.py not found, skipping"
        fi
      shell: bash
      
    - name: Test example configurations
      run: |
        python -c "
        import json
        import os
        
        # Test Claude Desktop config
        with open('examples/claude_desktop_config.json', 'r') as f:
            claude_config = json.load(f)
            assert 'mcpServers' in claude_config
            assert 'google-adk' in claude_config['mcpServers']
            print('‚úÖ Claude Desktop config is valid JSON')
        
        # Test Cursor configs
        with open('examples/cursor_mcp_config.json', 'r') as f:
            cursor_config = json.load(f)
            assert 'mcpServers' in cursor_config
            assert 'google-adk' in cursor_config['mcpServers']
            print('‚úÖ Cursor config is valid JSON')
            
        with open('examples/cursor_mcp_config_simple.json', 'r') as f:
            cursor_simple_config = json.load(f)
            assert 'mcpServers' in cursor_simple_config
            assert 'google-adk' in cursor_simple_config['mcpServers']
            print('‚úÖ Cursor simple config is valid JSON')
        "
        
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation files
      run: |
        echo "üìã Checking documentation files..."
        
        # Check required files exist
        required_files=(
          "README.md"
          "CHANGELOG.md" 
          "USAGE.md"
          "requirements.txt"
          "version.py"
          "examples/CURSOR_SETUP.md"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
    - name: Validate README structure
      run: |
        echo "üìã Validating README structure..."
        
        required_sections=(
          "## ‚ú® Key Features"
          "## üõ† Available MCP Tools"
          "## üöÄ Installation"
          "## üìñ Usage"
          "## üéØ Example Workflows"
        )
        
        for section in "${required_sections[@]}"; do
          if grep -q "$section" README.md; then
            echo "‚úÖ Found: $section"
          else
            echo "‚ùå Missing section: $section"
            exit 1
          fi
        done
        
    - name: Validate CHANGELOG format
      run: |
        echo "üìã Validating CHANGELOG format..."
        
        # Check for required changelog elements
        if grep -q "## \[1\.0\.0\]" CHANGELOG.md; then
          echo "‚úÖ Version 1.0.0 entry found"
        else
          echo "‚ùå Version 1.0.0 entry missing"
          exit 1
        fi
        
        if grep -q "### Added" CHANGELOG.md; then
          echo "‚úÖ 'Added' section found"
        else
          echo "‚ùå 'Added' section missing"
          exit 1
        fi
        
        if grep -q "### Fixed" CHANGELOG.md; then
          echo "‚úÖ 'Fixed' section found"
        else
          echo "‚ùå 'Fixed' section missing" 
          exit 1
        fi
        
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety
        
    - name: Check dependencies for security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || echo "Security check completed with warnings"
      continue-on-error: true
      
    - name: Check for sensitive information
      run: |
        echo "üîç Checking for sensitive information..."
        
        # Check for potential API keys or secrets
        if grep -r "api[_-]key\|secret\|password\|token" --include="*.py" --include="*.json" . | grep -v "your-" | grep -v "example" | grep -v "placeholder"; then
          echo "‚ö†Ô∏è Potential sensitive information found"
          exit 1
        else
          echo "‚úÖ No sensitive information detected"
        fi 